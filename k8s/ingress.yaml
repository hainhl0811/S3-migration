apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: s3-migration
  namespace: s3-migration
  labels:
    app: s3-migration
  annotations:
    # For nginx-ingress
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    # CORS support
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    # Rewrite and routing
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/use-regex: "true"
    # For cert-manager (uncomment if using)
    # cert-manager.io/cluster-issuer: "letsencrypt-prod"
    
    # For Traefik (uncomment if using Traefik)
    # traefik.ingress.kubernetes.io/router.middlewares: default-redirect-https@kubernetescrd
spec:
  ingressClassName: nginx  # Change to 'traefik' if using Traefik
  rules:
  - host: s3m.giaoducketnoi.edu.vn
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: s3-migration
            port:
              number: 80
  # Uncomment for TLS/HTTPS
  # tls:
  # - hosts:
  #   - s3-migration.example.com
  #   secretName: s3-migration-tls

